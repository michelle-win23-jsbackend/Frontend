@page "/signup"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Frontend.Filters
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Frontend.Data
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager

<PageTitle>Sign up</PageTitle>

<section id="sign-up">
    <div class="container">

        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger">
                @ErrorMessage
            </div>
        }

        <div class="content">
            <h1>Create Account</h1>
            <div class="texts">
                <p>Already have an account?</p>
                <a href="/signin">Sign in here.</a>
            </div>
            <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="signup" novalidate>
                <DataAnnotationsValidator />

                <div class="forms">

                    <div class="first-name">
                        <label>First name</label>
                        <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="givenname" aria-required="true" placeholder="Enter your first name" />
                        <ValidationMessage For="() => Input.FirstName" />
                    </div>

                    <div class="last-name">
                        <label>Last name</label>
                        <InputText @bind-Value="Input.LastName" class="form-control" autocomplete="surname" aria-required="true" placeholder="Enter your last name" />
                        <ValidationMessage For="() => Input.LastName" />
                    </div>

                    <div class="email">
                        <label>Email</label>
                        <InputText type="email" @bind-Value="Input.Email" class="form-control" autocomplete="email" aria-required="true" placeholder="Enter your email" />
                        <ValidationMessage For="() => Input.Email" />
                    </div>

                    <div class="password">
                        <label>Password</label>
                        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="password" aria-required="true" placeholder="Enter your password" />
                        <ValidationMessage For="() => Input.Password" />
                    </div>

                    <div class="confirm-password">
                        <label>Confirm password</label>
                        <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="confirm" aria-required="true" placeholder="Confirm your password" />
                        <ValidationMessage For="() => Input.ConfirmPassword" />
                    </div>

                </div>

                <div class="form-check">
                    <InputCheckbox @bind-Value="Input.TermsAndConditions" class="form-check-input" autocomplete="terms" aria-required="true" />
                    <label>I agree to the <a href="#">Terms</a> & <a href="#">Conditions</a>.</label>
                    <ValidationMessage For="() => Input.TermsAndConditions" />
                </div>
                <button type="submit" class="btn-theme-shadow">Sign up</button>
            </EditForm>
        </div>

    </div>
</section>

@code {

    private string? ErrorMessage { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = new ApplicationUser 
        { 
            FirstName = Input.FirstName,
            LastName = Input.LastName,
            UserName = Input.Email, 
            Email = Input.Email 
        };

        if (await UserManager.Users.AnyAsync(x => x.Email == user.Email))
        {
            ErrorMessage = "Email is already in use.";
            return;
        }

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
            return;

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            NavigationManager.NavigateTo($"/confirm?Email={user.Email}");
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        NavigationManager.NavigateTo(ReturnUrl ?? "/");
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "First name", Prompt = "Enter your first name")]
        public string FirstName { get; set; } = null!;

        [Required]
        [Display(Name = "Last name", Prompt = "Enter your last name")]
        public string LastName { get; set; } = null!;

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        [RegularExpression(@"^[\w-\.]+@([\w-]+\.)+[\w-]{2,}$", ErrorMessage = "Incorrect email format.")]
        public string Email { get; set; } = "";

        [Required]
        [RegularExpression (@"^^(?=.*[a-z])(?=.*[A-Z])(?=.*[^\da-zA-Z]).{8,}$", ErrorMessage = "Incorrect password format.")]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [CheckboxRequired]
        [Display(Name = "Terms & Conditions", Prompt = "Terms and Conditions")]
        public bool TermsAndConditions { get; set; }
    }
}
